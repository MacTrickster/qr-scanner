import { Html5QrcodeScanner, Html5Qrcode } from "html5-qrcode";
import React, { useEffect, useState, useRef } from "react";

export default function QRScanner() {
  const [qrData, setQrData] = useState("–°–∫–∞–Ω—É–π QR-–∫–æ–¥...");
  const [scanning, setScanning] = useState(true);
  const [status, setStatus] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [itemStatus, setItemStatus] = useState("–û—Ç—Ä–∏–º–∞–Ω–æ"); // Default status
  const [quantity, setQuantity] = useState(1); // Default quantity
  const [team, setTeam] = useState("–ö–æ–º–∞–Ω–¥—ñ A"); // Default team
  const iframeRef = useRef(null);
  const scannerRef = useRef(null);
  const html5QrcodeRef = useRef(null);
  
  // Google Apps Script web app URL - REPLACE THIS WITH YOUR DEPLOYED SCRIPT URL
  const scriptUrl = "https://script.google.com/macros/s/AKfycbzkk2sndJkGhIUTODWQ0E-Dnyn3eEqbYkZKGL5Yubr_lh9cGrChvdnQdBdDUAeaFmQniA/exec";

  useEffect(() => {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–∫–∞–Ω–µ—Ä –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    if (scanning && !html5QrcodeRef.current) {
      initializeScanner();
    } else if (scanning && html5QrcodeRef.current) {
      // –Ø–∫—â–æ —Å–∫–∞–Ω–µ—Ä –≤–∂–µ –±—É–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ –π–æ–≥–æ –∑–Ω–æ–≤—É
      startScanner();
    }
    
    // –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ —Ä–æ–∑–º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      if (html5QrcodeRef.current) {
        try {
          html5QrcodeRef.current.stop().catch(error => {
            console.error("Failed to stop camera:", error);
          });
        } catch (e) {
          console.log("Scanner cleanup error:", e);
        }
      }
    };
  }, [scanning]);

  const initializeScanner = async () => {
    try {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä Html5Qrcode –∑–∞–º—ñ—Å—Ç—å Html5QrcodeScanner
      html5QrcodeRef.current = new Html5Qrcode("reader");
      
      // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞–º–µ—Ä
      const devices = await Html5Qrcode.getCameras();
      
      if (devices && devices.length) {
        // –®—É–∫–∞—î–º–æ –∑–∞–¥–Ω—é –∫–∞–º–µ—Ä—É (environment)
        let selectedDeviceId = devices[0].id; // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –ø–µ—Ä—à–∞ –∫–∞–º–µ—Ä–∞
        
        // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∑–∞–¥–Ω—é –∫–∞–º–µ—Ä—É
        for (const device of devices) {
          // –ó–∞–¥–Ω—ñ –∫–∞–º–µ—Ä–∏ –∑–∞–∑–≤–∏—á–∞–π –º–∞—é—Ç—å "environment" –≤ –Ω–∞–∑–≤—ñ –∞–±–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ
          if (device.label && device.label.toLowerCase().includes("back") || 
              device.label && device.label.toLowerCase().includes("rear") ||
              device.id && device.id.toLowerCase().includes("environment")) {
            selectedDeviceId = device.id;
            break;
          }
        }
        
        startScanner(selectedDeviceId);
      } else {
        alert("–ö–∞–º–µ—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –≤–∞—à–æ–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó!");
      }
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∫–∞–Ω–µ—Ä–∞:", err);
    }
  };

  const startScanner = (deviceId = null) => {
    if (!html5QrcodeRef.current) return;
    
    // –û–ø—Ü—ñ—ó –∫–∞–º–µ—Ä–∏ - –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–∞–¥–Ω—é –∫–∞–º–µ—Ä—É
    const config = {
      fps: 10,
      qrbox: { width: 250, height: 250 },
      aspectRatio: 1.0,
      focusMode: "continuous",
      experimentalFeatures: {
        useBarCodeDetectorIfSupported: true
      }
    };
    
    const qrCodeSuccessCallback = (decodedText) => {
      setQrData(decodedText);
      setScanning(false);
      
      // –ó—É–ø–∏–Ω—è—î–º–æ —Å–∫–∞–Ω–µ—Ä, –∞–ª–µ –Ω–µ –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä
      html5QrcodeRef.current.stop().catch(error => {
        console.error("Failed to stop camera:", error);
      });
    };
    
    const qrCodeErrorCallback = (error) => {
      // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è, –≤–æ–Ω–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ñ –∫–æ–ª–∏ QR-–∫–æ–¥ –Ω–µ –≤–∏–¥–Ω–æ
      // console.error("QR scan error:", error);
    };
    
    // –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–∏—Å—Ç—Ä–æ—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
    if (deviceId) {
      html5QrcodeRef.current.start(
        { deviceId: { exact: deviceId } },
        config,
        qrCodeSuccessCallback,
        qrCodeErrorCallback
      ).catch((err) => {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –∫–∞–º–µ—Ä–∏:", err);
        
        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∑ –∑–∞–¥–∞–Ω–∏–º ID, —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–±—Ä–∞—Ç–∏ –∫–∞–º–µ—Ä—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        html5QrcodeRef.current.start(
          { facingMode: "environment" },
          config,
          qrCodeSuccessCallback,
          qrCodeErrorCallback
        ).catch((err2) => {
          console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –∫–∞–º–µ—Ä–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º:", err2);
        });
      });
    } else {
      // –Ø–∫—â–æ ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ facingMode: "environment" –¥–ª—è –∑–∞–¥–Ω—å–æ—ó –∫–∞–º–µ—Ä–∏
      html5QrcodeRef.current.start(
        { facingMode: "environment" },
        config,
        qrCodeSuccessCallback,
        qrCodeErrorCallback
      ).catch((err) => {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –∫–∞–º–µ—Ä–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º:", err);
      });
    }
  };

  // Form submission approach that bypasses CORS
  const sendToGoogleSheets = () => {
    setStatus("–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö...");
    setIsSubmitting(true);
    
    // Create a form element
    const form = document.createElement("form");
    form.method = "POST";
    form.action = scriptUrl;
    form.target = "hidden-iframe"; // Target the hidden iframe
    
    // Add form fields
    const qrField = document.createElement("input");
    qrField.type = "hidden";
    qrField.name = "qrData";
    qrField.value = qrData;
    
    const statusField = document.createElement("input");
    statusField.type = "hidden";
    statusField.name = "itemStatus";
    statusField.value = itemStatus;
    
    const quantityField = document.createElement("input");
    quantityField.type = "hidden";
    quantityField.name = "quantity";
    quantityField.value = quantity;
    
    const timestampField = document.createElement("input");
    timestampField.type = "hidden";
    timestampField.name = "timestamp";
    timestampField.value = new Date().toISOString();
    
    // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ –∫–æ–º–∞–Ω–¥–∏, —è–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ "–í–∏–¥–∞–Ω–æ –∑—ñ —Å–∫–ª–∞–¥—É"
    if (itemStatus === "–í–∏–¥–∞–Ω–æ –∑—ñ —Å–∫–ª–∞–¥—É") {
      const teamField = document.createElement("input");
      teamField.type = "hidden";
      teamField.name = "team";
      teamField.value = team;
      form.appendChild(teamField);
    }
    
    // Append fields to form
    form.appendChild(qrField);
    form.appendChild(statusField);
    form.appendChild(quantityField);
    form.appendChild(timestampField);
    
    // Append form to document
    document.body.appendChild(form);
    
    // Submit the form
    form.submit();
    
    // Set timeout for status update
    setTimeout(() => {
      setStatus("–î–∞–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ");
      setIsSubmitting(false);
    }, 3000);
    
    // Remove form from document
    document.body.removeChild(form);
  };
  
  const scanAgain = () => {
    setScanning(true);
    setStatus("");
    setItemStatus("–û—Ç—Ä–∏–º–∞–Ω–æ"); // Reset to default
    setQuantity(1); // Reset to default
    setTeam("–ö–æ–º–∞–Ω–¥—ñ A"); // Reset to default team
  };

  // Handle quantity change with validation
  const handleQuantityChange = (e) => {
    const value = parseInt(e.target.value);
    if (!isNaN(value) && value > 0) {
      setQuantity(value);
    } else if (e.target.value === "") {
      setQuantity("");
    }
  };

  return (
    <div className="container">
      <h1>üì∑ –°–∫–∞–Ω–µ—Ä QR-–∫–æ–¥—ñ–≤</h1>
      
      {/* Hidden iframe for form submission */}
      <iframe 
        ref={iframeRef}
        name="hidden-iframe"
        style={{ display: "none" }}
        title="Submission Frame"
      />
      
      {scanning ? (
        <div>
          <div id="reader" ref={scannerRef}></div>
          <p className="instruction">–ù–∞–≤–µ–¥—ñ—Ç—å –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥ –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è</p>
        </div>
      ) : (
        <div className="result-container">
          <div className="option-group">
            <label htmlFor="qrDataEdit">–í—ñ–¥—Å–∫–∞–Ω–æ–≤–∞–Ω–æ:</label>
            <input
              id="qrDataEdit"
              type="text"
              value={qrData}
              onChange={(e) => setQrData(e.target.value)}
              className="input-field qr-input"
            />
          </div>
          
          <div className="options-container">
            <div className="option-group">
              <label htmlFor="itemStatus">–°—Ç–∞—Ç—É—Å:</label>
              <select 
                id="itemStatus" 
                value={itemStatus} 
                onChange={(e) => setItemStatus(e.target.value)}
                className="input-field"
              >
                <option value="–û—Ç—Ä–∏–º–∞–Ω–æ">–û—Ç—Ä–∏–º–∞–Ω–æ</option>
                <option value="–í–∏–¥–∞–Ω–æ –∑—ñ —Å–∫–ª–∞–¥—É">–í–∏–¥–∞–Ω–æ –∑—ñ —Å–∫–ª–∞–¥—É</option>
                <option value="–ë—Ä–∞–∫">–ë—Ä–∞–∫</option>
              </select>
            </div>
            
            {/* –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –≤–∏–±—ñ—Ä –∫–æ–º–∞–Ω–¥–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ "–í–∏–¥–∞–Ω–æ –∑—ñ —Å–∫–ª–∞–¥—É" */}
            {itemStatus === "–í–∏–¥–∞–Ω–æ –∑—ñ —Å–∫–ª–∞–¥—É" && (
              <div className="option-group">
                <label htmlFor="team">–ö–æ–º—É:</label>
                <select 
                  id="team" 
                  value={team} 
                  onChange={(e) => setTeam(e.target.value)}
                  className="input-field"
                >
                  <option value="–ö–æ–º–∞–Ω–¥—ñ A">–ö–æ–º–∞–Ω–¥—ñ A</option>
                  <option value="–ö–æ–º–∞–Ω–¥—ñ B">–ö–æ–º–∞–Ω–¥—ñ B</option>
                  <option value="–ö–æ–º–∞–Ω–¥—ñ C">–ö–æ–º–∞–Ω–¥—ñ C</option>
                  <option value="–ö–æ–º–∞–Ω–¥—ñ D">–ö–æ–º–∞–Ω–¥—ñ D</option>
                </select>
              </div>
            )}
            
            <div className="option-group">
              <label htmlFor="quantity">–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</label>
              <input 
                id="quantity" 
                type="number" 
                min="1" 
                value={quantity} 
                onChange={handleQuantityChange}
                className="input-field"
              />
            </div>
          </div>
          
          {status && <p className="status">{status}</p>}
          
          <div className="buttons-container">
            <button 
              className="submit-btn" 
              onClick={sendToGoogleSheets}
              disabled={isSubmitting || quantity === "" || quantity < 1}
            >
              {isSubmitting ? "–í—ñ–¥–ø—Ä–∞–≤–∫–∞..." : "üì§ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–∞–Ω—ñ"}
            </button>
            
            <button 
              className="scan-btn" 
              onClick={scanAgain}
              disabled={isSubmitting}
            >
              üîÑ –°–∫–∞–Ω—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π QR-–∫–æ–¥
            </button>
          </div>
        </div>
      )}
      
      <style jsx>{`
        .container {
          max-width: 500px;
          margin: 0 auto;
          padding: 20
